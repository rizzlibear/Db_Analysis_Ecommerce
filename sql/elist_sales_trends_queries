/* 
For each month, calculating main sales metrics: order count, total sales, and aov
Filtering to only North America and MacBooks
Rounding numbers for readability
*/
WITH sales_trends_monthly_cte AS (
    SELECT 
        DATE_TRUNC(orders.purchase_ts, MONTH) AS purchase_month,
        COUNT(orders.id) AS total_orders,
        ROUND(SUM(orders.usd_price),2) AS total_sales,
        ROUND(AVG(orders.usd_price), 2) AS avg_sales
    FROM 
        elist.orders AS orders
    JOIN 
        elist.customers AS customers 
    ON 
        orders.customer_id = customers.id
    JOIN 
        elist.geo_lookup AS geo_lookup 
    ON 
        customers.country_code = geo_lookup.country
    WHERE 
        geo_lookup.region = 'NA' AND LOWER(orders.product_name) LIKE '%macbook%'
    GROUP BY 
        1
)
SELECT 
    ROUND(AVG(total_orders)) AS avg_total_orders,
    ROUND(AVG(total_sales)) AS avg_monthly_sales,
    ROUND(AVG(avg_sales)) AS avg_price
FROM 
    sales_trends_monthly_cte;

/* 
For each quarter, calculating main sales metrics: order count, total sales, and aov
Filtering to only North America and MacBooks
Rounding numbers for readability
*/
WITH sales_trends_quarterly_cte AS (
    SELECT 
        DATE_TRUNC(orders.purchase_ts, QUARTER) AS purchase_quarter,
        COUNT(orders.id) AS total_orders,
        ROUND(SUM(orders.usd_price),2) AS total_sales,
        ROUND(AVG(orders.usd_price), 2) AS avg_sales
    FROM 
        elist.orders AS orders
    JOIN 
        elist.customers AS customers 
    ON 
        orders.customer_id = customers.id
    JOIN 
        elist.geo_lookup AS geo_lookup 
    ON 
        customers.country_code = geo_lookup.country
    WHERE 
        geo_lookup.region = 'NA' AND LOWER(orders.product_name) LIKE '%macbook%'
    GROUP BY 
        1
)
SELECT 
    ROUND(AVG(total_orders)) AS avg_total_orders,
    ROUND(AVG(total_sales)) AS avg_quarterly_sales,
    ROUND(AVG(avg_sales)) AS avg_price
FROM 
    sales_trends_quarterly_cte;

/*
Counting the number of refunds per month (non-null values in refund_ts represent refunds)
Calculating the refund rate
*/
WITH monthly_refunds_cte AS (
    SELECT 
        DATE_TRUNC(purchase_ts, MONTH) AS month,
        SUM(CASE WHEN refund_ts IS NOT NULL THEN 1 ELSE 0 END) AS refunds,
        SUM(CASE WHEN refund_ts IS NOT NULL THEN 1 ELSE 0 END) / COUNT(DISTINCT order_id) AS refund_rate
    FROM 
        elist.order_status 
    WHERE 
        EXTRACT(YEAR FROM purchase_ts) = 2020
    GROUP BY 
        1
    ORDER BY 
        1
)
SELECT 
    ROUND(AVG(refund_rate),3) AS monthly_refunds
FROM 
    monthly_refunds_cte;

/*
Counting the number of refunds, filtered to 2021 
Only including Apple products, using lowercase to account for any differences in capitalization
*/
SELECT 
    DATE_TRUNC(order_status.refund_ts, month) AS month,
    SUM(CASE WHEN order_status.refund_ts IS NOT NULL THEN 1 ELSE 0 END) AS refunds
FROM 
    `elist-390902.elist.orders` orders
LEFT JOIN 
    `elist-390902.elist.order_status` order_status
ON 
    orders.id = order_status.order_id
WHERE 
    EXTRACT(YEAR FROM order_status.refund_ts) = 2021
    AND (LOWER(orders.product_name) LIKE '%apple%' OR LOWER(orders.product_name) LIKE '%macbook%')
GROUP BY 
    1
ORDER BY 
    1;

-- Cleaning up product names and calculating refund rates for each product
WITH refunds_cte AS (
    SELECT 
        CASE 
            WHEN product_name ='27in"" 4k gaming monitor' THEN '27in 4K gaming monitor' 
            ELSE product_name 
        END AS product_name_clean,
        COUNT(order_status.refund_ts) AS refunds,
        ROUND(COUNT(order_status.refund_ts) / COUNT(DISTINCT orders.id), 3) AS refund_rate
    FROM 
        elist.orders AS orders
    LEFT JOIN 
        elist.order_status AS order_status 
    ON 
        orders.id = order_status.order_id
    GROUP BY 
        1
)
-- Highlighting the 3 products with the highest refund rate
SELECT 
    product_name_clean, 
    refund_rate
FROM 
    refunds_cte
ORDER BY 
    2 DESC
LIMIT 
    3;